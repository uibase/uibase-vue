<script type="text/jsx">
  export default {
    name: 'BaseButton',
    props: {
      /**
       * ボタンの幅を指定します。
       * 幅の指定がない場合は、autoになります
       */
      width: {
        type: String,
        default: 'auto'
      },
      display: {
        type: String,
        default: 'inline-block',
        validator: (value) =>
          [undefined, 'inline-block', 'inline-flex', 'flex', 'block'].indexOf(
            value
          )
      },
      size: {
        type: String,
        <% const defaultSize = Object.keys(sizes).find(size => sizes[size].default === true); %>
        <% if (defaultSize) { %>
        default: '<%- defaultSize %>',
        <% } %>
        validator: (value) => [
          undefined,
          <%- Object.keys(sizes).map(size => `'${size}'`).join(',') %>
        ].indexOf(value)
      },
      /**
       * `nuxt-link` のリンク先を指定できます
       */
      to: {
        type: [String, Object],
        default: ''
      },
      /**
       * リンク先を指定できます。`to`が指定されている場合はそちらが優先されます
       */
      href: {
        type: String,
        default: ''
      },
      type: {
        type: String,
        default: 'primary',
        validator: (value) => [
          <%- Object.keys(colors).map((colorName) => `"${colorName}"`).join(',') %>
        ].indexOf(value)
      }
    },
    render(h) {
      const className = [
        this.$style.button,
        this.$style[this.type],
        this.$style[this.color]
      ];
      const displays = {
        'inline-block': 'inline-flex',
        'inline-flex': 'inline-flex',
        block: 'flex',
        flex: 'flex'
      }
      const style = {
        display: displays[this.display],
        width: this.width
      }
      if (!this.to && this.href) {
        return h('a', {
          attrs: { ...this.$attrs },
          on: { ...this.$listeners },
          class: className,
          style,
        }, this.$slots.default)
      }
      if (!this.to && !this.href) {
        return h('button', {
          attrs: { ...this.$attrs },
          on: { ...this.$listeners },
          class: className,
          style,
        }, this.$slots.default)
      }
      return h('nuxt-link', {
        attrs: { ...this.$attrs },
        on: { ...this.$listeners },
        props: {
          to: this.to
        },
        class: className,
        style,
      }, this.$slots.default)
    }
  }
</script>
<style lang="scss" module>
  .btn_wrapper {
    display: inline-block;
  }
  .button {
    border: 0;
    background: none;
    cursor: pointer;
    transition: 0.3s;
    display: inline-flex;
    font-size: 14px;
    font-weight: bold;
    text-decoration: none;
    align-items: center;
    justify-content: center;
    padding: 0 16px;
    text-align: center;
    box-sizing: border-box;
    outline: none;
    vertical-align: bottom;
    font-family: inherit;
    &.undone {
      background: #fff;
      color: #a19f9f;
    }
    <%- Object.keys(colors).reduce((str, colorName) => {
      return str + `
      &.${colorName} {
        ${this.style(colors[colorName], global)}
        &:hover {
            ${this.style(colors[colorName].hover, global)}
        }
      }
      &.${colorName}Bordered {
        color: ${typeof colors[colorName].background === 'string' ? colors[colorName].background : colors[colorName].background.color};
        background: #fff;
        border: ${bordered.width}px solid ${typeof colors[colorName].background === 'string' ? colors[colorName].background : colors[colorName].background.color};
      }
      `
    }, '') %>
  }
</style>
